# Test version of populationVulnerability.py that doesn't require API key
import pandas as pd
import numpy as np
import logging

logger = logging.getLogger(__name__)

def create_test_data():
    """
    Create test data to simulate census results for testing purposes.
    """
    # Generate realistic test data for California cities
    test_data = [
        {
            'state': 'CA',
            'place': 'Los Angeles',
            'percent_over_65': 0.15,
            'median_income': 65000,
            'percent_disabled': 0.08
        },
        {
            'state': 'CA',
            'place': 'San Francisco',
            'percent_over_65': 0.18,
            'median_income': 85000,
            'percent_disabled': 0.10
        },
        {
            'state': 'CA',
            'place': 'San Diego',
            'percent_over_65': 0.12,
            'median_income': 70000,
            'percent_disabled': 0.07
        },
        {
            'state': 'CA',
            'place': 'Sacramento',
            'percent_over_65': 0.14,
            'median_income': 55000,
            'percent_disabled': 0.09
        },
        {
            'state': 'CA',
            'place': 'Fresno',
            'percent_over_65': 0.13,
            'median_income': 45000,
            'percent_disabled': 0.11
        },
        {
            'state': 'CA',
            'place': 'Oakland',
            'percent_over_65': 0.16,
            'median_income': 60000,
            'percent_disabled': 0.12
        },
        {
            'state': 'CA',
            'place': 'Long Beach',
            'percent_over_65': 0.11,
            'median_income': 65000,
            'percent_disabled': 0.08
        }
    ]
    
    return pd.DataFrame(test_data)

def get_data(state):
    """
    Test version of get_data function that returns simulated census data.
    
    Args:
        state (str): State abbreviation (e.g., 'CA')
        
    Returns:
        pd.DataFrame: Simulated census data
    """
    logger.info(f"ðŸ“Š Generating test data for state: {state}")
    
    if state.upper() == 'CA':
        return create_test_data()
    else:
        # For other states, create generic data
        return pd.DataFrame({
            'state': [state.upper()] * 5,
            'place': [f'City_{i+1}' for i in range(5)],
            'percent_over_65': [0.12, 0.15, 0.10, 0.13, 0.11],
            'median_income': [60000, 70000, 50000, 65000, 55000],
            'percent_disabled': [0.08, 0.09, 0.07, 0.10, 0.08]
        })

if __name__ == "__main__":
    # Test the function
    print("Testing populationVulnerability test module...")
    
    # Test with California
    ca_data = get_data('CA')
    print("\nCalifornia data:")
    print(ca_data)
    
    # Test with another state
    ny_data = get_data('NY')
    print("\nNew York data:")
    print(ny_data)
    
    print("\nâœ… Test module working correctly!")
