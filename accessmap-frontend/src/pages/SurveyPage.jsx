import React, { useState } from 'react';
import { 
  ClipboardDocumentListIcon, 
  FaceSmileIcon,
  FaceFrownIcon,
  CheckCircleIcon,
  PhotoIcon,
  MapPinIcon
} from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';

// Survey questions for accessibility assessment
const surveyQuestions = [
  {
    id: 1,
    type: 'slider',
    question: 'How would you rate the overall accessibility of sidewalks in your area?',
    min: 1,
    max: 5,
    labels: ['Very Poor', 'Poor', 'Average', 'Good', 'Excellent']
  },
  {
    id: 2,
    type: 'multiple-choice',
    question: 'What accessibility barriers do you encounter most often?',
    options: [
      'Broken or missing curb ramps',
      'Uneven sidewalk surfaces',
      'Obstacles blocking pathways',
      'Lack of audio signals at crossings',
      'Poor lighting',
      'Other'
    ]
  },
  {
    id: 3,
    type: 'slider',
    question: 'How safe do you feel navigating your neighborhood?',
    min: 1,
    max: 5,
    labels: ['Very Unsafe', 'Unsafe', 'Neutral', 'Safe', 'Very Safe']
  },
  {
    id: 4,
    type: 'multiple-choice',
    question: 'Do you or someone in your household use mobility assistance?',
    options: [
      'Wheelchair',
      'Walker or cane',
      'Visual assistance (guide dog/cane)',
      'None',
      'Prefer not to answer'
    ]
  }
];

const SurveyPage = () => {
  const [responses, setResponses] = useState({});
  const [sentiment, setSentiment] = useState(3); // 1-5 scale
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSliderChange = (questionId, value) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const handleMultipleChoice = (questionId, option) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: option
    }));
  };

  const handleTextChange = (questionId, value) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    toast.success('Survey submitted successfully! Thank you for your feedback.');
    setIsSubmitting(false);
    
    // Reset form
    setResponses({});
    setSentiment(3);
  };

  const getSentimentIcon = (value) => {
    if (value <= 2) return '😡';
    if (value === 3) return '😐';
    return '😊';
  };

  const getSentimentLabel = (value) => {
    if (value <= 2) return 'Frustrated';
    if (value === 3) return 'Neutral';
    return 'Satisfied';
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center space-x-2 mb-4">
            <ClipboardDocumentListIcon className="h-8 w-8 text-primary-600" />
            <h1 className="text-3xl font-bold text-gray-900">AI-Generated Accessibility Survey</h1>
          </div>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Help us understand accessibility challenges in your community. 
            This survey was generated by our AI system based on current urban accessibility research.
          </p>
        </div>

        {/* Survey Form */}
        <form onSubmit={handleSubmit} className="space-y-8">
          <div className="bg-white rounded-lg shadow-lg p-6 md:p-8">
            {/* AI Badge */}
            <div className="flex items-center space-x-2 mb-6">
              <div className="bg-blue-100 border border-blue-300 rounded-full px-3 py-1 flex items-center space-x-2">
                <div className="w-4 h-4 bg-blue-600 rounded-full flex items-center justify-center">
                  <span className="text-white text-xs font-bold">AI</span>
                </div>
                <span className="text-blue-800 text-sm font-medium">Generated by Watsonx</span>
              </div>
            </div>

            {/* Questions */}
            <div className="space-y-8">
              {surveyQuestions.map((question, index) => (
                <div key={question.id} className="border-b border-gray-200 pb-6 last:border-b-0">
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    {index + 1}. {question.question}
                  </h3>

                  {/* Slider Question */}
                  {question.type === 'slider' && (
                    <div className="space-y-4">
                      <div className="px-4">
                        <input
                          type="range"
                          min={question.scale.min}
                          max={question.scale.max}
                          value={responses[question.id] || 3}
                          onChange={(e) => handleSliderChange(question.id, parseInt(e.target.value))}
                          className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                        />
                        <div className="flex justify-between text-sm text-gray-500 mt-2">
                          {question.scale.labels.map((label, idx) => (
                            <span key={idx} className="text-center flex-1">{label}</span>
                          ))}
                        </div>
                      </div>
                      <div className="text-center">
                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 text-primary-800">
                          Selected: {question.scale.labels[(responses[question.id] || 3) - 1]}
                        </span>
                      </div>
                    </div>
                  )}

                  {/* Multiple Choice Question */}
                  {question.type === 'multiple_choice' && (
                    <div className="space-y-3">
                      {question.options.map((option, idx) => (
                        <label key={idx} className="flex items-center space-x-3 cursor-pointer">
                          <input
                            type="radio"
                            name={`question_${question.id}`}
                            value={option}
                            checked={responses[question.id] === option}
                            onChange={() => handleMultipleChoice(question.id, option)}
                            className="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
                          />
                          <span className="text-gray-700">{option}</span>
                        </label>
                      ))}
                    </div>
                  )}

                  {/* Text Question */}
                  {question.type === 'text' && (
                    <div>
                      <textarea
                        rows={4}
                        placeholder={question.placeholder}
                        value={responses[question.id] || ''}
                        onChange={(e) => handleTextChange(question.id, e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500"
                      />
                    </div>
                  )}
                </div>
              ))}
            </div>

            {/* Sentiment Slider */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Overall, how do you feel about accessibility in your area?
              </h3>
              <div className="space-y-4">
                <div className="flex items-center justify-center space-x-4">
                  <FaceFrownIcon className="h-6 w-6 text-red-500" />
                  <input
                    type="range"
                    min="1"
                    max="5"
                    value={sentiment}
                    onChange={(e) => setSentiment(parseInt(e.target.value))}
                    className="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                  <FaceSmileIcon className="h-6 w-6 text-green-500" />
                </div>
                <div className="text-center">
                  <div className="text-4xl mb-2">{getSentimentIcon(sentiment)}</div>
                  <span className="text-lg font-medium text-gray-700">
                    {getSentimentLabel(sentiment)}
                  </span>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
              >
                {isSubmitting ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Submitting...
                  </>
                ) : (
                  <>
                    <CheckCircleIcon className="h-5 w-5 mr-2" />
                    Submit Survey
                  </>
                )}
              </button>
            </div>
          </div>
        </form>

        {/* SDG Callout */}
        <div className="mt-8 bg-green-50 border border-green-200 rounded-lg p-6">
          <div className="flex items-center space-x-3 mb-3">
            <div className="w-8 h-8 bg-green-600 rounded-full flex items-center justify-center">
              <span className="text-white text-sm font-bold">11</span>
            </div>
            <h4 className="font-medium text-green-900">Supporting UN SDG 11.3 - Inclusive Planning</h4>
          </div>
          <p className="text-sm text-green-800">
            Your responses help enhance inclusive and sustainable urbanization through participatory planning and community engagement.
          </p>
        </div>
      </div>
    </div>
  );
};

export default SurveyPage;
